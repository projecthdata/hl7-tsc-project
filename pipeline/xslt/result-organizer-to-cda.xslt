<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2010

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://projecthdata.org/hdata/schemas/2009/06/result_organizer" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="ns0 xs">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var1_instance_result_organizer" select="."/>
		<ClinicalDocument xmlns="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance">
				<xsl:value-of select="'urn:hl7-org:v3 Z:/projects/hl7-tsc-project/l32-schemas/L32_ClinicalDocument.xsd'"/>
			</xsl:attribute>
			<component>
				<structuredBody>
					<component>
						<section>
							<entry>
								<organizer>
									<xsl:attribute name="classCode" namespace="">
										<xsl:value-of select="'BATTERY'"/>
									</xsl:attribute>
									<xsl:attribute name="moodCode" namespace="">
										<xsl:value-of select="'EVN'"/>
									</xsl:attribute>
									<templateId>
										<xsl:attribute name="root" namespace="">
											<xsl:value-of select="'2.16.840.1.113883.10.20.1.32'"/>
										</xsl:attribute>
									</templateId>
									<templateId>
										<xsl:attribute name="root" namespace="">
											<xsl:value-of select="'2.16.840.1.113883.10.20.15.3.21'"/>
										</xsl:attribute>
									</templateId>
									<id>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var2_resultOrganizer" select="."/>
											<xsl:if test="$var2_resultOrganizer/ns0:organizerId/@root">
												<xsl:attribute name="root" namespace="">
													<xsl:value-of select="string($var2_resultOrganizer/ns0:organizerId/@root)"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:for-each>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var4_resultOrganizer" select="."/>
											<xsl:if test="$var4_resultOrganizer/ns0:organizerId/@extension">
												<xsl:attribute name="extension" namespace="">
													<xsl:value-of select="string($var4_resultOrganizer/ns0:organizerId/@extension)"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:for-each>
									</id>
									<code>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var6_resultOrganizer" select="."/>
											<xsl:attribute name="code" namespace="">
												<xsl:value-of select="string($var6_resultOrganizer/ns0:code/@code)"/>
											</xsl:attribute>
										</xsl:for-each>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var8_resultOrganizer" select="."/>
											<xsl:if test="$var8_resultOrganizer/ns0:code/@displayName">
												<xsl:attribute name="displayName" namespace="">
													<xsl:value-of select="string($var8_resultOrganizer/ns0:code/@displayName)"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:for-each>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var10_resultOrganizer" select="."/>
											<xsl:if test="$var10_resultOrganizer/ns0:code/@codeSystemName">
												<xsl:attribute name="codeSystemName" namespace="">
													<xsl:value-of select="string($var10_resultOrganizer/ns0:code/@codeSystemName)"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:for-each>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var12_resultOrganizer" select="."/>
											<xsl:attribute name="codeSystem" namespace="">
												<xsl:value-of select="string($var12_resultOrganizer/ns0:code/@codeSystem)"/>
											</xsl:attribute>
										</xsl:for-each>
									</code>
									<statusCode>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var14_resultOrganizer" select="."/>
											<xsl:if test="$var14_resultOrganizer/ns0:statusCode/@code">
												<xsl:attribute name="code" namespace="">
													<xsl:value-of select="string($var14_resultOrganizer/ns0:statusCode/@code)"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:for-each>
									</statusCode>
									<effectiveTime>
										<xsl:for-each select="$var1_instance_result_organizer/ns0:resultOrganizer">
											<xsl:variable name="var16_resultOrganizer" select="."/>
											<xsl:attribute name="value" namespace="">
												<xsl:value-of select="concat(concat(concat(concat(substring(string($var16_resultOrganizer/ns0:effectiveTime), 1, 4), substring(string($var16_resultOrganizer/ns0:effectiveTime), 6, 2)), substring(string($var16_resultOrganizer/ns0:effectiveTime), 9, 2)), substring(string($var16_resultOrganizer/ns0:effectiveTime), 12, 2)), substring(string($var16_resultOrganizer/ns0:effectiveTime), 15, 2))"/>
											</xsl:attribute>
										</xsl:for-each>
									</effectiveTime>
								</organizer>
							</entry>
						</section>
					</component>
				</structuredBody>
			</component>
		</ClinicalDocument>
	</xsl:template>
</xsl:stylesheet>
